#!/bin/sh

# Exit immediately if a command exits with a non-zero status,
# and treat unset variables as an error.
set -eu

# Enable 'pipefail' option if the shell supports it.
if (set -o | grep -q pipefail); then
  set -o pipefail
fi

# Default variables
ART_ANALYSIS_DIR="${HOME}/art_analysis"
ART_REPOSITORY="git@github.com:CRIB-project/artemis_crib.git"

main() {
  # Check for required commands
  need_cmd git
  need_cmd echo
  need_cmd mkdir
  need_cmd rm

  check_initialize || return 1
  git_setting || return 1

  # read experiment name
  readline "Input experimental name: "
  main_default_name="$RETVAL"
  printf "Input value: %s\n\n" "${main_default_name}"

  expdir="${ART_ANALYSIS_DIR}/${main_default_name}"
  if [ -d "${expdir}" ]; then
    err "${expdir} already exists."
  elif [ -e "${expdir}" ]; then
    err "A file named ${expdir} already exists."
  fi

  # Default repository setting
  say "If no input is provided, the default value is used."
  readline "Input base repository path or URL (default: ${ART_REPOSITORY}): "
  main_art_repo="$RETVAL"
  if [ -n "${main_art_repo}" ]; then
    ART_REPOSITORY=${main_art_repo}
  fi
  printf "Input value: %s\n\n" "$ART_REPOSITORY"

  # Raw data directory
  rawdata_dir="/mnt/data/${main_default_name}"
  readline "Input rawdata directory path (default: ${rawdata_dir}): "
  main_data_dir="$RETVAL"
  if [ -n "${main_data_dir}" ]; then
    rawdata_dir="${main_data_dir}"
  fi
  printf "Input value: %s\n\n" "$rawdata_dir"

  # Output rootfile directory
  outdata_dir="/Data/artemis_output/${main_default_name}"
  readline "Input output data directory path (default: ${outdata_dir}): "
  main_root_dir="$RETVAL"
  if [ -n "${main_root_dir}" ]; then
    outdata_dir="${main_root_dir}"
  fi
  printf "Input value: %s\n\n" "$outdata_dir"

  # User git configuration
  # Option selection
  say "Select an option for repository setup:"
  say "1. Create a new repository locally."
  say "2. Clone default branch and create a new branch '${main_default_name}'."
  say "3. Use the repository as is. (for developers)"
  while true; do
    printf "Enter your choice (1/2/3): "
    read -r main_choice
    case "${main_choice}" in
    1)
      # Option 1: Create a new repository locally
      setup_new_local_repository
      break
      ;;
    2)
      # Option 2: Clone and create a new branch
      setup_new_branch_repository
      break
      ;;
    3)
      # Option 3: Use the repository as is
      say "Using ${ART_REPOSITORY} as is."
      ensure mkdir -p "${expdir}"
      user_repos=${ART_REPOSITORY}
      user_branch="main"
      break
      ;;
    *)
      echo "Please enter 1, 2, or 3."
      ;;
    esac
  done

  # Create configuration file
  if [ -f "${ART_ANALYSIS_DIR}/.conf/${main_default_name}.sh" ]; then
    rm -f "${ART_ANALYSIS_DIR}/.conf/${main_default_name}.sh"
  fi

  cat <<EOF >>"${ART_ANALYSIS_DIR}/.conf/${main_default_name}.sh"
# Artemis configuration for ${main_default_name} experiment
export ART_ANALYSIS_DIR=${ART_ANALYSIS_DIR}
export ART_USER_REPOS=${user_repos}
export ART_USER_REPOS_BRANCH=${user_branch}
export ART_DATA_DIR=${rawdata_dir}
export OUTPUT_PATH=${outdata_dir}
export ROOT_INCLUDE_PATH=\${ROOT_INCLUDE_PATH}:src
EOF

  printf "\n\033[1mart_analysis setting for %s is finished!\033[0m\n" "${main_default_name}"
  printf "Add the following lines to your .zshrc or .bashrc:\n"
  printf "  export EXP_NAME='%s'\n\n" "${main_default_name}"
  printf "Now you can start the artemis using \033[1martlogin\033[0m command!"
}

# Function to set up a new local repository
setup_new_local_repository() {
  say "Creating a new repository in local machine for ${main_default_name}"

  art_local_repos_dir="${HOME}/repos/exp"
  readline "Input the local repository path (default: ${art_local_repos_dir}): "
  local_repo_dir="$RETVAL"
  if [ -n "${local_repo_dir}" ]; then
    art_local_repos_dir="${local_repo_dir}"
  fi
  printf "Input value: %s\n\n" "$art_local_repos_dir"

  if [ ! -d "${art_local_repos_dir}" ]; then
    ensure mkdir -p "${art_local_repos_dir}"
  fi

  # Clone the base repository from default branch and reinitialize git
  ensure mkdir -p "${expdir}"
  ensure git clone "${ART_REPOSITORY}" "${expdir}/.tmp" --depth 1

  cd "${expdir}/.tmp" || exit 1
  ensure rm -rf .git/
  ensure git init
  ensure git add .
  ensure git commit -m "Initial commit" >/dev/null
  ensure git branch -M main

  # Set up a new bare repository
  gitdir="${art_local_repos_dir}/${main_default_name}.git"
  if [ -d "${gitdir}" ]; then
    say "${gitdir} is exist, removing it..."
    ensure rm -rf "${gitdir}"
  fi
  ensure git init --bare "${gitdir}"

  # Add remote and push
  ensure git remote add origin "${gitdir}"
  ensure git push -u origin main

  cd - || exit 1
  ensure rm -rf "${expdir}/.tmp"
  user_repos="${gitdir}"
  user_branch="main"
}

# Function to set up a new branch in the repository
setup_new_branch_repository() {
  say "Cloning the repository and creating a new branch '${main_default_name}'"

  ensure mkdir -p "${expdir}"
  ensure git clone "${ART_REPOSITORY}" "${expdir}/.tmp"

  cd "${expdir}/.tmp" || exit 1
  # Create a new branch with the experiment name
  ensure git switch -c "${main_default_name}"
  # Set up tracking for the new branch
  ensure git push -u origin "${main_default_name}"

  cd - || exit 1
  ensure rm -rf "${expdir}/.tmp"
  user_repos="${ART_REPOSITORY}"
  user_branch="${main_default_name}"
}

# Function to check initialization
check_initialize() {
  while true; do
    printf "Create new Artemis work directory? (y/n): "
    read -r ci_answer
    case "${ci_answer}" in
    y | Y)
      break
      ;;
    n | N)
      echo "Cancelled."
      exit 0
      ;;
    *)
      echo "Please answer 'y' or 'n'."
      ;;
    esac
  done
}

# Function to set up Git configuration
git_setting() {
  gs_fullname=""
  gs_email=""

  if [ ! -e "${HOME}/.gitconfig" ] && [ ! -e "${HOME}/.config/git/config" ]; then
    say "Setting up Git global config..."
    readline "Input fullname: "
    gs_fullname="$RETVAL"
    ensure git config --global user.name "${gs_fullname}"

    readline "Input email address: "
    gs_email="$RETVAL"
    ensure git config --global user.email "${gs_email}"
  fi
}

# Function to read user input with confirmation
readline() {
  while true; do
    printf "%s" "$1"
    read -r rl_value
    printf "Is it OK? (y/n): "
    read -r rl_answer
    case "${rl_answer}" in
    y | Y)
      break
      ;;
    *) ;;
    esac
  done
  RETVAL="${rl_value}"
}

# Function to print messages in bold
say() {
  printf "\033[1martnew\033[0m: %s\n" "$1"
}

# Function to print error messages and exit
err() {
  say "$1" >&2
  exit 1
}

# Function to check if a command exists
need_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    err "Need '$1' (command not found)"
  fi
}

# Function to ensure a command runs successfully
ensure() {
  if ! "$@"; then
    err "Command failed: $*"
  fi
}

# Execute the main function
main "$@" || exit 1
